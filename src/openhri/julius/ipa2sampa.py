#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''ipa to sampa converter

Copyright (C) 2010
    Yosuke Matsusaka
    Intelligent Systems Research Institute,
    National Institute of Advanced Industrial Science and Technology (AIST),
    Japan
    All rights reserved.
Licensed under the Eclipse Public License -v 1.0 (EPL)
http://www.opensource.org/licenses/eclipse-1.0.txt
'''

import re

class ipa2sampa:
    def __init__(self):
        self._dict = {
            u'‖': ' ||',
            u' ': ' oeh',
            u'.': '  ',
            u':': ':',
            u'a': ' a',
            u'b': ' b',
            u'c': ' c',
            u'd': ' d',
            u'e': ' e',
            u'f': ' f',
            u'g': ' g',
            u'h': ' h',
            u'i': ' i',
            u'j': ' j',
            u'k': ' k',
            u'l': ' l',
            u'm': ' m',
            u'n': ' n',
            u'o': ' o',
            u'p': ' p',
            u'q': ' q',
            u'r': ' r',
            u's': ' s',
            u't': ' t',
            u'u': ' u',
            u'v': ' v',
            u'w': ' w',
            u'x': ' x',
            u'y': ' y',
            u'z': ' z',
            u'|': ' |',
            u'ⁿ': ' _n',
            u'ã': ' e~',
            u'æ': ' &',
            u'ç': ' C',
            u'ð': ' D',
            u'õ': ' o~',
            u'ö': ' oeh',
            u'ø': ' oeh',
            u'ħ': ' X',
            u'ŋ': ' N',
            u'œ': ' oe',
            u'ƀ': ' B',
            u'↑': ' ^',
            u'↓': ' !',
            u'↗': ' <R>',
            u'↘': ' <F>',
            u'ƥ': ' p_<',
            u'ƫ': ' t_j',
            u'ƭ': ' t_<',
            u'ƻ': ' dz)',
            u'ǀ': ' |',
            u'ǁ': ' ||',
            u'ǂ': '=',
            u'ǃ': ' !',
            u'∫': ' S',
            u'ɐ': ' ah',
            u'ɑ': ' A',
            u'ɒ': ' Q',
            u'ɓ': ' b_<',
            u'ɔ': ' O',
            u'ɕ': ' s',
            u'ɖ': ' d`',
            u'ɗ': ' d_<',
            u'ɘ': ' @',
            u'ə': ' @',
            u'ɚ': ' @`',
            u'ɛ': ' E',
            u'ɜ': ' 3',
            u'ɝ': ' 3`',
            u'ɞ': ' 3',
            u'ɟ': ' J',
            u'ɠ': ' g_<',
            u'ɡ': ' g',
            u'ɢ': ' G',
            u'ɣ': ' G',
            u'ɤ': ' 7',
            u'ɥ': ' H',
            u'ɦ': ' h',
            u'ɧ': ' x',
            u'ɨ': ' 1',
            u'ɩ': ' I',
            u'ɪ': ' I',
            u'ɫ': ' 5',
            u'ɬ': ' K',
            u'ɭ': ' l`',
            u'ɮ': ' K',
            u'ɯ': ' M',
            u'ɰ': ' M',
            u'ɱ': ' F',
            u'ɲ': ' J',
            u'ɳ': ' n`',
            u'ɴ': ' N',
            u'ɵ': ' 8',
            u'ɶ': ' &',
            u'ɷ': ' U',
            u'ɸ': ' p',
            u'ɹ': ' r',
            u'ɺ': ' l',
            u'ɻ': ' r`',
            u'ɼ': ' r_r',
            u'ɽ': ' r`',
            u'ɾ': ' 4',
            u'ɿ': ' z=',
            u'ʀ': ' R',
            u'ʁ': ' R',
            u'ʂ': ' s`',
            u'ʃ': ' S',
            u'ʄ': ' J_<',
            u'ʅ': ' z`=',
            u'ʆ': ' S_j',
            u'ʇ': ' |',
            u'ʈ': ' t`',
            u'ʉ': ' u',
            u'ʊ': ' U',
            u'ʋ': ' v',
            u'ʌ': ' V',
            u'ʍ': ' W',
            u'ʎ': ' L',
            u'ʏ': ' Y',
            u'ʐ': ' z`',
            u'ʑ': ' z',
            u'ʒ': ' Z',
            u'ʓ': ' Z_j',
            u'ʔ': ' ?',
            u'ʕ': ' ?',
            u'ʖ': ' ||',
            u'ʗ': ' !',
            u'ʘ': ' O',
            u'ʙ': ' B',
            u'ʚ': ' &',
            u'ʛ': ' G_<',
            u'ʜ': ' H',
            u'ʝ': ' j',
            u'ʟ': ' L',
            u'ʠ': ' q_<',
            u'ʡ': ' >',
            u'ʢ': ' <',
            u'ʣ': ' dz)',
            u'ʤ': ' dZ)',
            u'ʥ': ' dz)',
            u'ʦ': ' ts)',
            u'ʧ': ' tS)',
            u'ʨ': ' ts)',
            u'ʩ': ' fN)',
            u'ʪ': ' ls)',
            u'ʫ': ' lz)',
            u'ʬ': ' ._w_w',
            u'ʭ': ' ._d_d',
            u'ʰ': ' _h',
            u'ʱ': ' _t',
            u'ʲ': ' _j',
            u'ʶ': ' R',
            u'ʷ': ' _w',
            u'ʸ': ' _j',
            u'ʼ': '_>',
            u'ˀ': '_>',
            u'ˇ': ' _F_R',
            u'ˉ': ' _T',
            u'ˌ': ' %',
            u'ˍ': ' _L',
            u'ˎ': ' _L_B',
            u'ˏ': ' _B_L',
            u'ː': ':',
            u'ˑ': ':',
            u'˒': ' _O',
            u'˓': ' _c',
            u'˔': ' _r',
            u'˕': ' _o',
            u'˖': '_+',
            u'˗': '_-',
            u'˘': ' _X',
            u'˚': '_0',
            u'˜': ' ~',
            u'˝': ' _T',
            u'˞': '`',
            u'ˠ': ' _G',
            u'ˡ': ' _l',
            u'ˤ': ' _?',
            u'˥': ' _T',
            u'˦': ' _H',
            u'˧': ' _M',
            u'˨': ' _L',
            u'˩': ' _B',
            u'ˬ': ' _v',
            u'̀': ' _L',
            u'́': ' _H',
            u'̂': ' _F',
            u'̃': ' ~',
            u'̄': ' _M',
            u'̆': ' _X',
            u'̊': '_0',
            u'̋': ' _T',
            u'̌': ' _R',
            u'̍': '=',
            u'̏': ' _B',
            u'̘': ' _A',
            u'̙': ' _q',
            u'̚': '_}',
            u'̜': ' _c',
            u'̝': ' _r',
            u'̞': ' _o',
            u'̟': '_+',
            u'̠': '_-',
            u'̡': ' _j',
            u'̢': '`',
            u'̤': ' _t',
            u'̥': '_0',
            u'̨': ' ~',
            u'̩': '=',
            u'̪': ' _d',
            u'̫': ' _w',
            u'̬': ' _v',
            u'̯': '_^',
            u'̰': ' _k',
            u'̴': ' _e',
            u'̹': ' _O',
            u'̺': ' _a',
            u'̻': ' _m',
            u'̼': ' _N',
            u'̽': ' _x',
            u'͡': ' _',
            u'β': ' B',
            u'θ': ' T',
            u'χ': ' x',
            }

    def extend(self, ipa, sampa):
        # not implemented
        pass

    def convert(self, text):
        ret = ''
        try:
            ret = ''.join(map(lambda m: self._dict[m], text))
        except KeyError:
            print "found non-ipa symbol in " + text
        return ret.strip(' ')

def main():
    import sys, codecs, parsesrgs
    sys.stdin = codecs.getreader('utf-8')(sys.stdin)
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout)
    i2s = ipa2sampa()
    pls = parsesrgs.PLS()
    pls.parse([sys.argv[1],])
    for i, s in pls._alphabet.iteritems():
        i2s.extend(i, s)
    for k in pls._dict.keys():
        for p in pls._dict[k]:
            print k + ": " + p + " -> " + i2s.convert(p)
            
if __name__ == '__main__':
    main()
